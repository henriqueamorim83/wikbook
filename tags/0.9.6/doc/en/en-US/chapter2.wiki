Wiki concepts are naturally mapped onto docbook concepts.

= Document structure =

A book is structured into chapters and each chapter is structured into sections. A wiki document provides a syntax
for creating nested sections with different levels. The book structure can naturally leverage the wiki document
structure with the following rules:

* Top level section correspond to book chapters
* Other wiki sections correspond to book sections

|(((
{{code}}
= Section 1 =
== Section 2 ==
{{/code}})))|(((
{{code language=xml indent=2}}
<chapter>
  <title>Section 1</title>
  <section>
    <title>Section 2</title>
  </section>
</chapter>
{{/code}})))

{{note}}All wiki sections don't have to be explicitely declared, it is possible to //omit// the declaration of a section. When it
occurs, implicit docbook section will be created with no title.{{/note}}

= Document content =

The content of a book can be seen as a collection of content, each content can be categorized into blocks
or rich text. Rich text can either be simple text or it can be made richer, like a word in bold. A block contains
usually rich text and gives a meaning to the text, the most natural block is the paragraph.

== Rich text ==

=== Emphasis ===

The following syntax can be used to put the emphasis for creating richtext

(% title="Text emphasis" %)
|{{{**bold**}}}|**bold**
|{{{//italic//}}}|//italic//
|{{{__underline__}}}|__underline__
|{{{,,subscript,,}}}|,,subscript,,
|{{{^^upperscript^^}}}|^^upperscript^^
|{{{--strikethrough--}}}|--strikethrough--
|{{{##monospaced##}}}|##monospaced##
|{{{{{code}}inlineCode(){{/code}}}}}|{{code}}inlineCode(){{/code}}

=== Links ===

We can distinguish two kinds of links. A link can reference a target inside the document such as an anchor or a section or
it can reference an URL.

The anchor macro plays an important role in internal links as it specifies the potential target of a link. Any internal
link should reference a valid anchor inside the document. An anchor can be placed anywhere in text but it can also be present
in a section title.

(% title="Document links" %)
|((({{code}}
= Chapter 1 {{anchor id=chapter_1 /}} =
A [[link>>#chapter_1]] to the chapter 1
The [[#chapter_1]] can be linked
A [[link>>#foo]] to an anchor {{anchor id=foo /}}
{{/code}})))|((({{code language=xml indent=2}}
<chapter>
  <title>Chapter 1</title>
  <para>A <link linkend="chapter_1">link</link> to the chapter 1</para>
  <para>The <xref linkend="chapter_1"/> can be linked</para>
  <para>A <link linkend="foo">link</link> to an anchor</para>
</chapter>
{{/code}})))

(% title="External links" %)
|The [[http://www.foobar.com]] site
|The [[FooBar>>http://www.foobar.com]] site
|Send a mail to [[mailto:foo@bar.com]]

== Verbatim text ==

Verbatim escapes the wiki syntax and is useful for citing wiki in a wiki document. It is useful for creating document
such as this documentation.

(% title="Verbatim text" %)
|(((
{{code}}
{{{[foo>>#bar]}}}
{{/code}})))|(((
{{code language=xml indent=2}}
<para>[foo>>#bar]</para>
{{/code}})))

== Blocks ==

=== Paragraphs ===

Unlike docbook, wiki paragraphs are implicitely defined, the general rule is that any text content that does not
contain wiki instruction is one paragraph. The wikbook system creates docbook paragraphs when it is required. The simplest
example is that any content in a section is a paragraph.

(% title="Paragraph generation" %)
|((({{code}}
= Chapter 1 =
The paragraph of the chapter 1.
== Section 1 ==
The paragraph of the section 1.
== Section 2 ==
The first paragraph of the section 2.

The second paragraph of the section 2.
{{/code}})))|(((
{{code language=xml indent=2}}
<chapter>
  <title>Chapter 1</title>
  <para>The paragraph of the chapter 1.</para>
  <section>
    <title>Section 1</title>
    <para>The paragraph of the section 1.</para>
  </section>
  <section>
    <title>Section 2</title>
    <para>The first paragraph of the section 2.</para>
    <para>The second paragraph of the section 2.</para>
  </section>
</chapter>
{{/code}})))

=== Lists ===

It is easy to create lists in wiki syntax, whereas the docbook XML is very tedious. Several types of lists are
possible such as bullet or ordered list.

(% title="List examples" %)
|((({{code}}
* item 1
** item 1.1
** item 1.2
* item 2{{/code}})))|(((
* item 1
** item 1.1
** item 1.2
* item 2)))
|((({{code}}
1. item 1
11. item 1.1
11. item 1.2
1. item 2{{/code}})))|(((
1. item 1
11. item 1.1
11. item 1.2
1. item 2)))
|((({{code}}
(% style="upperroman" %)
1. item 1
11. item 1.1
11. item 1.2
1. item 2{{/code}})))|(((
(% style="upperroman" %)
1. item 1
11. item 1.1
11. item 1.2
1. item 2)))

It is possible to configure also the list style according to the docbook capabilities.

* Bullet style
** disc
** circle
** square
* Numbering style
** arabic
** loweralpha
** loweroman
** upperalpha
** uperroman
** arabicindic

=== Tables ===

Tables are mapped to the docbook tables, here are a few examples

(% title="Table examples" %)
|((({{code}}
|1|2|3
|4|5|6
{{/code}})))|(((
(% title="A simple table" %)
|1|2|3
|4|5|6
)))
|((({{code}}
|=1|=2|=3
|4|5|6
{{/code}})))|(((
(% title="A table with a row header" %)
|=1|=2|=3
|4|5|6
)))
|((({{code}}
|1|2|3
|=4|=5|=6
{{/code}})))|(((
(% title="A table with a row footer" %)
|1|2|3
|=4|=5|=6
)))
|((({{code}}
(% title="The table" %)
|1|2|3
|4|5|6
{{/code}})))|(((
(% title="The table" %)
|1|2|3
|4|5|6
)))

By default a table expects inline content, that means that any content inside the table will not be interpreted as wiki
text but as normal text. It is possible to change that behavior with the usage of the {{{(((...)))}}} block allowing
the usage of nested tables or lists.

(% title="A list inside a table" %)
|((({{code}}
|(((
* item 1
* item 2
)))
{{/code}})))|(((
|(((
* item 1
* item 2
)))
)))

{{note}}This document makes an extensive usage of this feature.{{/note}}
{{warning}}Inside a complex content block, the usage of structural elements such as section is not allowed.{{/warning}}

=== Images ===

Images can be displayed a block elements. Image display can be parameterized for all output but it is possible to
target a specific output with a prefix. The //fo// prefix affects the PDF output and the //html// targets the
HTML content. More details about docbook images parameterization can be found in the docbook
[[imagedata>>http://www.docbook.org/tdg/en/html/imagedata.html]] reference.

(% title="Image example" %)
|((({{code}}
[[image:images/controller.png||title="The controller" align="center" html:scale="50" fo:width="50mm]]
{{/code}})))
|(((
[[image:images/controller.png||title="The controller" align="center" html:scale="50" fo:width="50mm]]
)))

=== Admonitions ===

(% title="Admonitions" %)
|Note|{{{{{note}}Some noticeable text{{/note}}}}}|((({{note}}some noticeable text{{/note}})))
|Warning|{{{{{warning}}you should not do that{{/warning}}}}}|((({{warning}}you should not do that{{/warning}})))
|Tip|{{{{{tip}}a usefull tip{{/tip}}}}}|((({{tip}}a usefull tip{{/tip}})))
|Caution|{{{{{caution}}beware!!!{{/caution}}}}}|((({{caution}}beware!!!{{/caution}})))
|Important|{{{{{important}}something important{{/important}}}}}|((({{important}}something important{{/important}})))

=== Special blocks ===

A set of special blocks are available, they allow to give a special representation to the emboddied text.

The //code// macro creates a docbook programlisting XML element to display anything related to code. Special features
are available that makes it very powerful

* XML code can be validated and pretty printed with a configuration indentation
* External Java code can be embedded inside the document

(% title="A simple code example" %)
|((({{code}}{{code}}x = x + 1{{/code}}{{/code}})))
|((({{code}}x = x + 1{{/code}})))

(% title="Simple XML validation" %)
|((({{code}}{{code language=xml}}<valid/>{{/code}}{{/code}})))
|((({{code language=xml}}<valid/>{{/code}})))

(% title="XML pretty printted" %)
|((({{code}}{{code language=xml indent=2}}<valid><formatted/></valid>{{/code}}{{/code}})))
|((({{code language=xml indent=2}}<valid><formatted/></valid>{{/code}})))

The //screen// macro creates a docbook screen XML element to display anything related to the computer screen:

(% title="A screen example" %)
|((({{code}}{{screen}}
julien:core julien$ ls -l
total 24
-rw-r--r--  1 julien  staff  1878 Apr 26 15:08 pom.xml
drwxr-xr-x  5 julien  staff   170 Apr 26 15:08 src
drwxr-xr-x  5 julien  staff   170 Apr 26 18:46 target
-rw-r--r--  1 julien  staff  4090 Apr 26 15:09 wikbook.core.iml
{{/screen}}{{/code}})))
|((({{screen}}
julien:core julien$ ls -l
total 24
-rw-r--r--  1 julien  staff  1878 Apr 26 15:08 pom.xml
drwxr-xr-x  5 julien  staff   170 Apr 26 15:08 src
drwxr-xr-x  5 julien  staff   170 Apr 26 18:46 target
-rw-r--r--  1 julien  staff  4090 Apr 26 15:09 wikbook.core.iml
{{/screen}})))

==== Callouts ====

Callouts are useful for creating a set of references that refers to a block of code. At the moment they are only
available for Java^^tm^^ language. A callout is declared inside a code block using comments in special format.

(% title="A simple callout" %)
|((({{code}}{{code language=java}}public void foo()
{
   System.out.println("This is going to the output"); // <1> A callout
}
{{/code}}{{/code}})))
|((({{code language=java}}public void foo()
{
   System.out.println("This is going to the output"); // <1> A callout
}
{{/code}})))

Callout anchor don't have to be mixed with the related text, a simple declaration without any text will just
create an anchor. Somewhere else in the code base, the callout text can be declared by adding an equals sign
between the right angle bracket and the text. As a consequence, several lines can be referenced with the
same callout.

(% title="A callout anchor and its text" %)
|((({{code}}{{code language=java}}public void foo()
{
   int a = 0; // <1>
   int b = 0; // <1>
}
// <1> = An assignment
{{/code}}{{/code}})))
|((({{code language=java}}public void foo()
{
   int a = 0; // <1>
   int b = 0; // <1>
}
// <1> = An assignment
{{/code}})))

== Definition list ==

Wiki definition lists are managed as docbook variable lists.

(% title="Definition lists" %)
|(((
{{code}}
; term
: definition
{{/code}})))|(((
{{code language=xml indent=2}}
<variablelist>
  <varlistentry>
    <term>term</term>
    <listitem>definition</listitem>
  </varlistentry>
</variablelist>
{{/code}})))
|(((
{{code}}
(% title="the title" %)
; term
: definition
{{/code}})))|(((
{{code language=xml indent=2}}
<variablelist>
  <title>the title</title>
  <varlistentry>
    <term>term</term>
    <listitem>definition</listitem>
  </varlistentry>
</variablelist>
{{/code}})))

== Modularization ==

The //include// macro is a good way to provide modularization of a complex document.

{{example title="Document embedding"}}
{{code}}{{include document="embedded.wiki" /}}{{/code}}
{{/example}}

{{important}}Embedding does a special treatment to sections: when a document is embedded, its section are reconsidered with respect
to the most inner section embedding the document.{{/important}}
