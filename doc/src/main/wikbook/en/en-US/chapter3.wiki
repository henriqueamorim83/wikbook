This chapter focuses on the integration of the documentation with the project it documents.

= Java^^tm^^ code embedding =

Wikbook allows to embbed Java^^tm^^ source code inside the documentation. It is very powerful when it comes
to explain a tutorial or to explain an API.

todo

= Maven integration =

The Maven Wikbook plugin converts wiki document to a Docbook document. In order to produce final consumable documents
(PDF, HTML), the Docbook document must be converted to new documents, this process is usually done via an XSL stylesheet
that takes the Docbook document and transforms it.

== The Maven Wikbook plugin ==

The Maven Wikbook plugin focus on transforming the Wiki content into a compliant DocBook XML document.

{{example title="Example of Wikbook Maven plugin"}}
{{xml indent=2}}
<plugin>
 <groupId>org.wikbook</groupId>
 <artifactId>wikbook.maven</artifactId>
 <executions>
   <execution>
     <phase>prepare-package</phase>
     <goals>
       <goal>transform</goal>
     </goals>
   </execution>
 </executions>
 <configuration>
   <sourceDirectory>${pom.basedir}/src/main/wikbook/en/en-US</sourceDirectory>
   <sourceFileName>book.wiki</sourceFileName>
   <destinationDirectory>${project.build.directory}/wikbook/src</destinationDirectory>
   <destinationFileName>index.xml</destinationFileName>
   <emitDoctype>false</emitDoctype>
 </configuration>
</plugin>
{{/xml}}
{{/example}}

== The Maven transformation plugins ==

A transformation plugin plays an important role in the documentation generation because it takes the docbook generated
 by wikbook and transforms it into the real documentation. There are at least two plugins that provides this functionnality:

* The [[Docbkx Tools>>http://code.google.com/p/docbkx-tools/]] project: it contains a plugin that is actually used
by the Wikbook archetype.
* The [[Maven jDocBook Plugin>>http://www.jboss.org/maven-jdocbook-plugin/]] project.

Configuration of these plugins is not covered in this guide, however each of them contain a fairly good documentation,
both are comparable in term of feature and can generate the main formats like HTML or PDF.

== The Maven Wikbook archetype ==

The Wikbook archetype creates a Wikbook module that contains a basic documentation and its POM contains the plugin
configuration to generate HTML and PDF formats. Its usage is very simple:

{{example title="Wikbook archetype usage"}}
{{screen}}
>mvn archetype:generate \
  -DarchetypeGroupId=org.wikbook \
  -DarchetypeArtifactId=wikbook.archetype \
  -DarchetypeVersion=$[wikbook.version] \
  -DgroupId=<my.groupid> \
  -DartifactId=<my-artifactId>
{{/screen}}
{{/example}}

After that, it is ready to be used and tweaked.

== Integration of code block citation {{anchor id=maven_code_citation_section/}} ==

We have covered how code can be cited in the [[#java_code_citation_section]] and the [[#xml_code_inclusion_section]].
Inside a Maven project, the Wikbook plugin requires access to the dependencies containing the code, source and binaries.

=== Producing the source dependencies ===

By default Maven does not create source code artifacts, however the //maven-source-plugin// does. Here is an example
of the plugin configuration that can be added to a project to activate the generation of the source code artifact
along with the compiled code artifact:

{{example title="Configuration of the maven-source-plugin"}}
{{xml indent=2}}
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-source-plugin</artifactId>
<executions>
<execution>
<id>attach-sources</id>
<goals>
<goal>jar-no-fork</goal>
</goals>
</execution>
</executions>
</plugin>
{{/xml}}
{{/example}}

=== Declaring the right dependency ===

The source code artifact needs to be declared as a dependency of the Maven module processing the Wikbook document:

{{example title="Declaring the right dependency"}}
{{xml indent=2}}
<!-- Declares a dependency on the code -->
<dependency>
<groupId>groupId</groupId>
<artifactId>artifactId</artifactId>
<version>1.0-SNAPSHOT</version>
</dependency>
<!-- Declares a dependency on the source code -->
<dependency>
<groupId>groupId</groupId>
<artifactId>artifactId</artifactId>
<version>1.0-SNAPSHOT</version>
<classifier>sources</classifier>
</dependency>
{{/xml}}
{{/example}}